/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 30;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_schar;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __intmax_t = ::libc::c_long;
pub type __uintmax_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::libc::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type __sig_atomic_t = ::libc::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::libc::c_schar;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::libc::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const WGPU_WHOLE_SIZE: u64 = 18446744073709551615;
pub type WGPUFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterImpl {
    _unused: [u8; 0],
}
pub type WGPUAdapter = *mut WGPUAdapterImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroup = *mut WGPUBindGroupImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUBindGroupLayout = *mut WGPUBindGroupLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUBuffer = *mut WGPUBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandBuffer = *mut WGPUCommandBufferImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUCommandEncoder = *mut WGPUCommandEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePassEncoder = *mut WGPUComputePassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineImpl {
    _unused: [u8; 0],
}
pub type WGPUComputePipeline = *mut WGPUComputePipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceImpl {
    _unused: [u8; 0],
}
pub type WGPUDevice = *mut WGPUDeviceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUFenceImpl {
    _unused: [u8; 0],
}
pub type WGPUFence = *mut WGPUFenceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceImpl {
    _unused: [u8; 0],
}
pub type WGPUInstance = *mut WGPUInstanceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutImpl {
    _unused: [u8; 0],
}
pub type WGPUPipelineLayout = *mut WGPUPipelineLayoutImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUQueueImpl {
    _unused: [u8; 0],
}
pub type WGPUQueue = *mut WGPUQueueImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundle = *mut WGPURenderBundleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderBundleEncoder = *mut WGPURenderBundleEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassEncoderImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPassEncoder = *mut WGPURenderPassEncoderImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineImpl {
    _unused: [u8; 0],
}
pub type WGPURenderPipeline = *mut WGPURenderPipelineImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerImpl {
    _unused: [u8; 0],
}
pub type WGPUSampler = *mut WGPUSamplerImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleImpl {
    _unused: [u8; 0],
}
pub type WGPUShaderModule = *mut WGPUShaderModuleImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceImpl {
    _unused: [u8; 0],
}
pub type WGPUSurface = *mut WGPUSurfaceImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSwapChainImpl {
    _unused: [u8; 0],
}
pub type WGPUSwapChain = *mut WGPUSwapChainImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureImpl {
    _unused: [u8; 0],
}
pub type WGPUTexture = *mut WGPUTextureImpl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewImpl {
    _unused: [u8; 0],
}
pub type WGPUTextureView = *mut WGPUTextureViewImpl;
pub const WGPUAdapterType_WGPUAdapterType_DiscreteGPU: WGPUAdapterType = 0;
pub const WGPUAdapterType_WGPUAdapterType_IntegratedGPU: WGPUAdapterType = 1;
pub const WGPUAdapterType_WGPUAdapterType_CPU: WGPUAdapterType = 2;
pub const WGPUAdapterType_WGPUAdapterType_Unknown: WGPUAdapterType = 3;
pub const WGPUAdapterType_WGPUAdapterType_Force32: WGPUAdapterType = 2147483647;
pub type WGPUAdapterType = u32;
pub const WGPUAddressMode_WGPUAddressMode_Repeat: WGPUAddressMode = 0;
pub const WGPUAddressMode_WGPUAddressMode_MirrorRepeat: WGPUAddressMode = 1;
pub const WGPUAddressMode_WGPUAddressMode_ClampToEdge: WGPUAddressMode = 2;
pub const WGPUAddressMode_WGPUAddressMode_Force32: WGPUAddressMode = 2147483647;
pub type WGPUAddressMode = u32;
pub const WGPUBackendType_WGPUBackendType_Null: WGPUBackendType = 0;
pub const WGPUBackendType_WGPUBackendType_D3D11: WGPUBackendType = 1;
pub const WGPUBackendType_WGPUBackendType_D3D12: WGPUBackendType = 2;
pub const WGPUBackendType_WGPUBackendType_Metal: WGPUBackendType = 3;
pub const WGPUBackendType_WGPUBackendType_Vulkan: WGPUBackendType = 4;
pub const WGPUBackendType_WGPUBackendType_OpenGL: WGPUBackendType = 5;
pub const WGPUBackendType_WGPUBackendType_OpenGLES: WGPUBackendType = 6;
pub const WGPUBackendType_WGPUBackendType_Force32: WGPUBackendType = 2147483647;
pub type WGPUBackendType = u32;
pub const WGPUBindingType_WGPUBindingType_UniformBuffer: WGPUBindingType = 0;
pub const WGPUBindingType_WGPUBindingType_StorageBuffer: WGPUBindingType = 1;
pub const WGPUBindingType_WGPUBindingType_ReadonlyStorageBuffer: WGPUBindingType = 2;
pub const WGPUBindingType_WGPUBindingType_Sampler: WGPUBindingType = 3;
pub const WGPUBindingType_WGPUBindingType_SampledTexture: WGPUBindingType = 4;
pub const WGPUBindingType_WGPUBindingType_StorageTexture: WGPUBindingType = 5;
pub const WGPUBindingType_WGPUBindingType_Force32: WGPUBindingType = 2147483647;
pub type WGPUBindingType = u32;
pub const WGPUBlendFactor_WGPUBlendFactor_Zero: WGPUBlendFactor = 0;
pub const WGPUBlendFactor_WGPUBlendFactor_One: WGPUBlendFactor = 1;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcColor: WGPUBlendFactor = 2;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcColor: WGPUBlendFactor = 3;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlpha: WGPUBlendFactor = 4;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcAlpha: WGPUBlendFactor = 5;
pub const WGPUBlendFactor_WGPUBlendFactor_DstColor: WGPUBlendFactor = 6;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDstColor: WGPUBlendFactor = 7;
pub const WGPUBlendFactor_WGPUBlendFactor_DstAlpha: WGPUBlendFactor = 8;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusDstAlpha: WGPUBlendFactor = 9;
pub const WGPUBlendFactor_WGPUBlendFactor_SrcAlphaSaturated: WGPUBlendFactor = 10;
pub const WGPUBlendFactor_WGPUBlendFactor_BlendColor: WGPUBlendFactor = 11;
pub const WGPUBlendFactor_WGPUBlendFactor_OneMinusBlendColor: WGPUBlendFactor = 12;
pub const WGPUBlendFactor_WGPUBlendFactor_Force32: WGPUBlendFactor = 2147483647;
pub type WGPUBlendFactor = u32;
pub const WGPUBlendOperation_WGPUBlendOperation_Add: WGPUBlendOperation = 0;
pub const WGPUBlendOperation_WGPUBlendOperation_Subtract: WGPUBlendOperation = 1;
pub const WGPUBlendOperation_WGPUBlendOperation_ReverseSubtract: WGPUBlendOperation = 2;
pub const WGPUBlendOperation_WGPUBlendOperation_Min: WGPUBlendOperation = 3;
pub const WGPUBlendOperation_WGPUBlendOperation_Max: WGPUBlendOperation = 4;
pub const WGPUBlendOperation_WGPUBlendOperation_Force32: WGPUBlendOperation = 2147483647;
pub type WGPUBlendOperation = u32;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Success: WGPUBufferMapAsyncStatus = 0;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Error: WGPUBufferMapAsyncStatus = 1;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Unknown: WGPUBufferMapAsyncStatus = 2;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_DeviceLost: WGPUBufferMapAsyncStatus =
    3;
pub const WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Force32: WGPUBufferMapAsyncStatus =
    2147483647;
pub type WGPUBufferMapAsyncStatus = u32;
pub const WGPUCompareFunction_WGPUCompareFunction_Never: WGPUCompareFunction = 0;
pub const WGPUCompareFunction_WGPUCompareFunction_Less: WGPUCompareFunction = 1;
pub const WGPUCompareFunction_WGPUCompareFunction_LessEqual: WGPUCompareFunction = 2;
pub const WGPUCompareFunction_WGPUCompareFunction_Greater: WGPUCompareFunction = 3;
pub const WGPUCompareFunction_WGPUCompareFunction_GreaterEqual: WGPUCompareFunction = 4;
pub const WGPUCompareFunction_WGPUCompareFunction_Equal: WGPUCompareFunction = 5;
pub const WGPUCompareFunction_WGPUCompareFunction_NotEqual: WGPUCompareFunction = 6;
pub const WGPUCompareFunction_WGPUCompareFunction_Always: WGPUCompareFunction = 7;
pub const WGPUCompareFunction_WGPUCompareFunction_Force32: WGPUCompareFunction = 2147483647;
pub type WGPUCompareFunction = u32;
pub const WGPUCullMode_WGPUCullMode_None: WGPUCullMode = 0;
pub const WGPUCullMode_WGPUCullMode_Front: WGPUCullMode = 1;
pub const WGPUCullMode_WGPUCullMode_Back: WGPUCullMode = 2;
pub const WGPUCullMode_WGPUCullMode_Force32: WGPUCullMode = 2147483647;
pub type WGPUCullMode = u32;
pub const WGPUErrorFilter_WGPUErrorFilter_None: WGPUErrorFilter = 0;
pub const WGPUErrorFilter_WGPUErrorFilter_Validation: WGPUErrorFilter = 1;
pub const WGPUErrorFilter_WGPUErrorFilter_OutOfMemory: WGPUErrorFilter = 2;
pub const WGPUErrorFilter_WGPUErrorFilter_Force32: WGPUErrorFilter = 2147483647;
pub type WGPUErrorFilter = u32;
pub const WGPUErrorType_WGPUErrorType_NoError: WGPUErrorType = 0;
pub const WGPUErrorType_WGPUErrorType_Validation: WGPUErrorType = 1;
pub const WGPUErrorType_WGPUErrorType_OutOfMemory: WGPUErrorType = 2;
pub const WGPUErrorType_WGPUErrorType_Unknown: WGPUErrorType = 3;
pub const WGPUErrorType_WGPUErrorType_DeviceLost: WGPUErrorType = 4;
pub const WGPUErrorType_WGPUErrorType_Force32: WGPUErrorType = 2147483647;
pub type WGPUErrorType = u32;
pub const WGPUFenceCompletionStatus_WGPUFenceCompletionStatus_Success: WGPUFenceCompletionStatus =
    0;
pub const WGPUFenceCompletionStatus_WGPUFenceCompletionStatus_Error: WGPUFenceCompletionStatus = 1;
pub const WGPUFenceCompletionStatus_WGPUFenceCompletionStatus_Unknown: WGPUFenceCompletionStatus =
    2;
pub const WGPUFenceCompletionStatus_WGPUFenceCompletionStatus_DeviceLost:
    WGPUFenceCompletionStatus = 3;
pub const WGPUFenceCompletionStatus_WGPUFenceCompletionStatus_Force32: WGPUFenceCompletionStatus =
    2147483647;
pub type WGPUFenceCompletionStatus = u32;
pub const WGPUFilterMode_WGPUFilterMode_Nearest: WGPUFilterMode = 0;
pub const WGPUFilterMode_WGPUFilterMode_Linear: WGPUFilterMode = 1;
pub const WGPUFilterMode_WGPUFilterMode_Force32: WGPUFilterMode = 2147483647;
pub type WGPUFilterMode = u32;
pub const WGPUFrontFace_WGPUFrontFace_CCW: WGPUFrontFace = 0;
pub const WGPUFrontFace_WGPUFrontFace_CW: WGPUFrontFace = 1;
pub const WGPUFrontFace_WGPUFrontFace_Force32: WGPUFrontFace = 2147483647;
pub type WGPUFrontFace = u32;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint16: WGPUIndexFormat = 0;
pub const WGPUIndexFormat_WGPUIndexFormat_Uint32: WGPUIndexFormat = 1;
pub const WGPUIndexFormat_WGPUIndexFormat_Force32: WGPUIndexFormat = 2147483647;
pub type WGPUIndexFormat = u32;
pub const WGPUInputStepMode_WGPUInputStepMode_Vertex: WGPUInputStepMode = 0;
pub const WGPUInputStepMode_WGPUInputStepMode_Instance: WGPUInputStepMode = 1;
pub const WGPUInputStepMode_WGPUInputStepMode_Force32: WGPUInputStepMode = 2147483647;
pub type WGPUInputStepMode = u32;
pub const WGPULoadOp_WGPULoadOp_Clear: WGPULoadOp = 0;
pub const WGPULoadOp_WGPULoadOp_Load: WGPULoadOp = 1;
pub const WGPULoadOp_WGPULoadOp_Force32: WGPULoadOp = 2147483647;
pub type WGPULoadOp = u32;
pub const WGPUPresentMode_WGPUPresentMode_NoVSync: WGPUPresentMode = 0;
pub const WGPUPresentMode_WGPUPresentMode_VSync: WGPUPresentMode = 1;
pub const WGPUPresentMode_WGPUPresentMode_Force32: WGPUPresentMode = 2147483647;
pub type WGPUPresentMode = u32;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_PointList: WGPUPrimitiveTopology = 0;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineList: WGPUPrimitiveTopology = 1;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineStrip: WGPUPrimitiveTopology = 2;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleList: WGPUPrimitiveTopology = 3;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleStrip: WGPUPrimitiveTopology = 4;
pub const WGPUPrimitiveTopology_WGPUPrimitiveTopology_Force32: WGPUPrimitiveTopology = 2147483647;
pub type WGPUPrimitiveTopology = u32;
pub const WGPUSType_WGPUSType_Invalid: WGPUSType = 0;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromMetalLayer: WGPUSType = 1;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromWindowsHWND: WGPUSType = 2;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromXlib: WGPUSType = 3;
pub const WGPUSType_WGPUSType_SurfaceDescriptorFromHTMLCanvasId: WGPUSType = 4;
pub const WGPUSType_WGPUSType_Force32: WGPUSType = 2147483647;
pub type WGPUSType = u32;
pub const WGPUStencilOperation_WGPUStencilOperation_Keep: WGPUStencilOperation = 0;
pub const WGPUStencilOperation_WGPUStencilOperation_Zero: WGPUStencilOperation = 1;
pub const WGPUStencilOperation_WGPUStencilOperation_Replace: WGPUStencilOperation = 2;
pub const WGPUStencilOperation_WGPUStencilOperation_Invert: WGPUStencilOperation = 3;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementClamp: WGPUStencilOperation = 4;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementClamp: WGPUStencilOperation = 5;
pub const WGPUStencilOperation_WGPUStencilOperation_IncrementWrap: WGPUStencilOperation = 6;
pub const WGPUStencilOperation_WGPUStencilOperation_DecrementWrap: WGPUStencilOperation = 7;
pub const WGPUStencilOperation_WGPUStencilOperation_Force32: WGPUStencilOperation = 2147483647;
pub type WGPUStencilOperation = u32;
pub const WGPUStoreOp_WGPUStoreOp_Store: WGPUStoreOp = 0;
pub const WGPUStoreOp_WGPUStoreOp_Clear: WGPUStoreOp = 1;
pub const WGPUStoreOp_WGPUStoreOp_Force32: WGPUStoreOp = 2147483647;
pub type WGPUStoreOp = u32;
pub const WGPUTextureAspect_WGPUTextureAspect_All: WGPUTextureAspect = 0;
pub const WGPUTextureAspect_WGPUTextureAspect_StencilOnly: WGPUTextureAspect = 1;
pub const WGPUTextureAspect_WGPUTextureAspect_DepthOnly: WGPUTextureAspect = 2;
pub const WGPUTextureAspect_WGPUTextureAspect_Force32: WGPUTextureAspect = 2147483647;
pub type WGPUTextureAspect = u32;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Float: WGPUTextureComponentType = 0;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Sint: WGPUTextureComponentType = 1;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Uint: WGPUTextureComponentType = 2;
pub const WGPUTextureComponentType_WGPUTextureComponentType_Force32: WGPUTextureComponentType =
    2147483647;
pub type WGPUTextureComponentType = u32;
pub const WGPUTextureDimension_WGPUTextureDimension_1D: WGPUTextureDimension = 0;
pub const WGPUTextureDimension_WGPUTextureDimension_2D: WGPUTextureDimension = 1;
pub const WGPUTextureDimension_WGPUTextureDimension_3D: WGPUTextureDimension = 2;
pub const WGPUTextureDimension_WGPUTextureDimension_Force32: WGPUTextureDimension = 2147483647;
pub type WGPUTextureDimension = u32;
pub const WGPUTextureFormat_WGPUTextureFormat_Undefined: WGPUTextureFormat = 0;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Unorm: WGPUTextureFormat = 1;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Snorm: WGPUTextureFormat = 2;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Uint: WGPUTextureFormat = 3;
pub const WGPUTextureFormat_WGPUTextureFormat_R8Sint: WGPUTextureFormat = 4;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Uint: WGPUTextureFormat = 5;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Sint: WGPUTextureFormat = 6;
pub const WGPUTextureFormat_WGPUTextureFormat_R16Float: WGPUTextureFormat = 7;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Unorm: WGPUTextureFormat = 8;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Snorm: WGPUTextureFormat = 9;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Uint: WGPUTextureFormat = 10;
pub const WGPUTextureFormat_WGPUTextureFormat_RG8Sint: WGPUTextureFormat = 11;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Float: WGPUTextureFormat = 12;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Uint: WGPUTextureFormat = 13;
pub const WGPUTextureFormat_WGPUTextureFormat_R32Sint: WGPUTextureFormat = 14;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Uint: WGPUTextureFormat = 15;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Sint: WGPUTextureFormat = 16;
pub const WGPUTextureFormat_WGPUTextureFormat_RG16Float: WGPUTextureFormat = 17;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Unorm: WGPUTextureFormat = 18;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8UnormSrgb: WGPUTextureFormat = 19;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Snorm: WGPUTextureFormat = 20;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Uint: WGPUTextureFormat = 21;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA8Sint: WGPUTextureFormat = 22;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8Unorm: WGPUTextureFormat = 23;
pub const WGPUTextureFormat_WGPUTextureFormat_BGRA8UnormSrgb: WGPUTextureFormat = 24;
pub const WGPUTextureFormat_WGPUTextureFormat_RGB10A2Unorm: WGPUTextureFormat = 25;
pub const WGPUTextureFormat_WGPUTextureFormat_RG11B10Float: WGPUTextureFormat = 26;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Float: WGPUTextureFormat = 27;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Uint: WGPUTextureFormat = 28;
pub const WGPUTextureFormat_WGPUTextureFormat_RG32Sint: WGPUTextureFormat = 29;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Uint: WGPUTextureFormat = 30;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Sint: WGPUTextureFormat = 31;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA16Float: WGPUTextureFormat = 32;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Float: WGPUTextureFormat = 33;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Uint: WGPUTextureFormat = 34;
pub const WGPUTextureFormat_WGPUTextureFormat_RGBA32Sint: WGPUTextureFormat = 35;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth32Float: WGPUTextureFormat = 36;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24Plus: WGPUTextureFormat = 37;
pub const WGPUTextureFormat_WGPUTextureFormat_Depth24PlusStencil8: WGPUTextureFormat = 38;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnorm: WGPUTextureFormat = 39;
pub const WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnormSrgb: WGPUTextureFormat = 40;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnorm: WGPUTextureFormat = 41;
pub const WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnormSrgb: WGPUTextureFormat = 42;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnorm: WGPUTextureFormat = 43;
pub const WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnormSrgb: WGPUTextureFormat = 44;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RUnorm: WGPUTextureFormat = 45;
pub const WGPUTextureFormat_WGPUTextureFormat_BC4RSnorm: WGPUTextureFormat = 46;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGUnorm: WGPUTextureFormat = 47;
pub const WGPUTextureFormat_WGPUTextureFormat_BC5RGSnorm: WGPUTextureFormat = 48;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBUfloat: WGPUTextureFormat = 49;
pub const WGPUTextureFormat_WGPUTextureFormat_BC6HRGBSfloat: WGPUTextureFormat = 50;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnorm: WGPUTextureFormat = 51;
pub const WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnormSrgb: WGPUTextureFormat = 52;
pub const WGPUTextureFormat_WGPUTextureFormat_Force32: WGPUTextureFormat = 2147483647;
pub type WGPUTextureFormat = u32;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Undefined: WGPUTextureViewDimension = 0;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_1D: WGPUTextureViewDimension = 1;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2D: WGPUTextureViewDimension = 2;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_2DArray: WGPUTextureViewDimension = 3;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Cube: WGPUTextureViewDimension = 4;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_CubeArray: WGPUTextureViewDimension = 5;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_3D: WGPUTextureViewDimension = 6;
pub const WGPUTextureViewDimension_WGPUTextureViewDimension_Force32: WGPUTextureViewDimension =
    2147483647;
pub type WGPUTextureViewDimension = u32;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar2: WGPUVertexFormat = 0;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar4: WGPUVertexFormat = 1;
pub const WGPUVertexFormat_WGPUVertexFormat_Char2: WGPUVertexFormat = 2;
pub const WGPUVertexFormat_WGPUVertexFormat_Char4: WGPUVertexFormat = 3;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar2Norm: WGPUVertexFormat = 4;
pub const WGPUVertexFormat_WGPUVertexFormat_UChar4Norm: WGPUVertexFormat = 5;
pub const WGPUVertexFormat_WGPUVertexFormat_Char2Norm: WGPUVertexFormat = 6;
pub const WGPUVertexFormat_WGPUVertexFormat_Char4Norm: WGPUVertexFormat = 7;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort2: WGPUVertexFormat = 8;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort4: WGPUVertexFormat = 9;
pub const WGPUVertexFormat_WGPUVertexFormat_Short2: WGPUVertexFormat = 10;
pub const WGPUVertexFormat_WGPUVertexFormat_Short4: WGPUVertexFormat = 11;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort2Norm: WGPUVertexFormat = 12;
pub const WGPUVertexFormat_WGPUVertexFormat_UShort4Norm: WGPUVertexFormat = 13;
pub const WGPUVertexFormat_WGPUVertexFormat_Short2Norm: WGPUVertexFormat = 14;
pub const WGPUVertexFormat_WGPUVertexFormat_Short4Norm: WGPUVertexFormat = 15;
pub const WGPUVertexFormat_WGPUVertexFormat_Half2: WGPUVertexFormat = 16;
pub const WGPUVertexFormat_WGPUVertexFormat_Half4: WGPUVertexFormat = 17;
pub const WGPUVertexFormat_WGPUVertexFormat_Float: WGPUVertexFormat = 18;
pub const WGPUVertexFormat_WGPUVertexFormat_Float2: WGPUVertexFormat = 19;
pub const WGPUVertexFormat_WGPUVertexFormat_Float3: WGPUVertexFormat = 20;
pub const WGPUVertexFormat_WGPUVertexFormat_Float4: WGPUVertexFormat = 21;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt: WGPUVertexFormat = 22;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt2: WGPUVertexFormat = 23;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt3: WGPUVertexFormat = 24;
pub const WGPUVertexFormat_WGPUVertexFormat_UInt4: WGPUVertexFormat = 25;
pub const WGPUVertexFormat_WGPUVertexFormat_Int: WGPUVertexFormat = 26;
pub const WGPUVertexFormat_WGPUVertexFormat_Int2: WGPUVertexFormat = 27;
pub const WGPUVertexFormat_WGPUVertexFormat_Int3: WGPUVertexFormat = 28;
pub const WGPUVertexFormat_WGPUVertexFormat_Int4: WGPUVertexFormat = 29;
pub const WGPUVertexFormat_WGPUVertexFormat_Force32: WGPUVertexFormat = 2147483647;
pub type WGPUVertexFormat = u32;
pub const WGPUBufferUsage_WGPUBufferUsage_None: WGPUBufferUsage = 0;
pub const WGPUBufferUsage_WGPUBufferUsage_MapRead: WGPUBufferUsage = 1;
pub const WGPUBufferUsage_WGPUBufferUsage_MapWrite: WGPUBufferUsage = 2;
pub const WGPUBufferUsage_WGPUBufferUsage_CopySrc: WGPUBufferUsage = 4;
pub const WGPUBufferUsage_WGPUBufferUsage_CopyDst: WGPUBufferUsage = 8;
pub const WGPUBufferUsage_WGPUBufferUsage_Index: WGPUBufferUsage = 16;
pub const WGPUBufferUsage_WGPUBufferUsage_Vertex: WGPUBufferUsage = 32;
pub const WGPUBufferUsage_WGPUBufferUsage_Uniform: WGPUBufferUsage = 64;
pub const WGPUBufferUsage_WGPUBufferUsage_Storage: WGPUBufferUsage = 128;
pub const WGPUBufferUsage_WGPUBufferUsage_Indirect: WGPUBufferUsage = 256;
pub const WGPUBufferUsage_WGPUBufferUsage_Force32: WGPUBufferUsage = 2147483647;
pub type WGPUBufferUsage = u32;
pub type WGPUBufferUsageFlags = WGPUFlags;
pub const WGPUColorWriteMask_WGPUColorWriteMask_None: WGPUColorWriteMask = 0;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Red: WGPUColorWriteMask = 1;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Green: WGPUColorWriteMask = 2;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Blue: WGPUColorWriteMask = 4;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Alpha: WGPUColorWriteMask = 8;
pub const WGPUColorWriteMask_WGPUColorWriteMask_All: WGPUColorWriteMask = 15;
pub const WGPUColorWriteMask_WGPUColorWriteMask_Force32: WGPUColorWriteMask = 2147483647;
pub type WGPUColorWriteMask = u32;
pub type WGPUColorWriteMaskFlags = WGPUFlags;
pub const WGPUShaderStage_WGPUShaderStage_None: WGPUShaderStage = 0;
pub const WGPUShaderStage_WGPUShaderStage_Vertex: WGPUShaderStage = 1;
pub const WGPUShaderStage_WGPUShaderStage_Fragment: WGPUShaderStage = 2;
pub const WGPUShaderStage_WGPUShaderStage_Compute: WGPUShaderStage = 4;
pub const WGPUShaderStage_WGPUShaderStage_Force32: WGPUShaderStage = 2147483647;
pub type WGPUShaderStage = u32;
pub type WGPUShaderStageFlags = WGPUFlags;
pub const WGPUTextureUsage_WGPUTextureUsage_None: WGPUTextureUsage = 0;
pub const WGPUTextureUsage_WGPUTextureUsage_CopySrc: WGPUTextureUsage = 1;
pub const WGPUTextureUsage_WGPUTextureUsage_CopyDst: WGPUTextureUsage = 2;
pub const WGPUTextureUsage_WGPUTextureUsage_Sampled: WGPUTextureUsage = 4;
pub const WGPUTextureUsage_WGPUTextureUsage_Storage: WGPUTextureUsage = 8;
pub const WGPUTextureUsage_WGPUTextureUsage_OutputAttachment: WGPUTextureUsage = 16;
pub const WGPUTextureUsage_WGPUTextureUsage_Force32: WGPUTextureUsage = 2147483647;
pub type WGPUTextureUsage = u32;
pub type WGPUTextureUsageFlags = WGPUFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUChainedStruct {
    pub next: *const WGPUChainedStruct,
    pub sType: WGPUSType,
}
#[test]
fn bindgen_test_layout_WGPUChainedStruct() {
    assert_eq!(
        ::core::mem::size_of::<WGPUChainedStruct>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUChainedStruct))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUChainedStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUChainedStruct))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUChainedStruct>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUChainedStruct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUChainedStruct>())).sType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUChainedStruct),
            "::",
            stringify!(sType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
}
#[test]
fn bindgen_test_layout_WGPUAdapterDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUAdapterDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(WGPUAdapterDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUAdapterDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUAdapterDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUAdapterDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUAdapterProperties {
    pub nextInChain: *const WGPUChainedStruct,
    pub deviceID: u32,
    pub vendorID: u32,
    pub name: *const ::libc::c_char,
    pub adapterType: WGPUAdapterType,
    pub backendType: WGPUBackendType,
}
#[test]
fn bindgen_test_layout_WGPUAdapterProperties() {
    assert_eq!(
        ::core::mem::size_of::<WGPUAdapterProperties>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUAdapterProperties))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUAdapterProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUAdapterProperties))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUAdapterProperties>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUAdapterProperties>())).deviceID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUAdapterProperties>())).vendorID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUAdapterProperties>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUAdapterProperties>())).adapterType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(adapterType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUAdapterProperties>())).backendType as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUAdapterProperties),
            "::",
            stringify!(backendType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupBinding {
    pub binding: u32,
    pub buffer: WGPUBuffer,
    pub offset: u64,
    pub size: u64,
    pub sampler: WGPUSampler,
    pub textureView: WGPUTextureView,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupBinding() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBindGroupBinding>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUBindGroupBinding))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBindGroupBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupBinding))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupBinding>())).binding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupBinding>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupBinding>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupBinding>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupBinding>())).sampler as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupBinding>())).textureView as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupBinding),
            "::",
            stringify!(textureView)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutBinding {
    pub binding: u32,
    pub visibility: WGPUShaderStageFlags,
    pub type_: WGPUBindingType,
    pub hasDynamicOffset: bool,
    pub multisampled: bool,
    pub textureDimension: WGPUTextureViewDimension,
    pub textureComponentType: WGPUTextureComponentType,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupLayoutBinding() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBindGroupLayoutBinding>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUBindGroupLayoutBinding))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBindGroupLayoutBinding>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupLayoutBinding))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).binding as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).visibility as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).hasDynamicOffset as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(hasDynamicOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).multisampled as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(multisampled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).textureDimension as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(textureDimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutBinding>())).textureComponentType as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutBinding),
            "::",
            stringify!(textureComponentType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBlendDescriptor {
    pub operation: WGPUBlendOperation,
    pub srcFactor: WGPUBlendFactor,
    pub dstFactor: WGPUBlendFactor,
}
#[test]
fn bindgen_test_layout_WGPUBlendDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBlendDescriptor>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUBlendDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBlendDescriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUBlendDescriptor))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBlendDescriptor>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBlendDescriptor>())).srcFactor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(srcFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBlendDescriptor>())).dstFactor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBlendDescriptor),
            "::",
            stringify!(dstFactor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferCopyView {
    pub nextInChain: *const WGPUChainedStruct,
    pub buffer: WGPUBuffer,
    pub offset: u64,
    pub rowPitch: u32,
    pub imageHeight: u32,
}
#[test]
fn bindgen_test_layout_WGPUBufferCopyView() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBufferCopyView>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUBufferCopyView))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBufferCopyView>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBufferCopyView))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferCopyView>())).nextInChain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferCopyView>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferCopyView>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferCopyView>())).rowPitch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(rowPitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferCopyView>())).imageHeight as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferCopyView),
            "::",
            stringify!(imageHeight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBufferDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub usage: WGPUBufferUsageFlags,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_WGPUBufferDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBufferDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUBufferDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBufferDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBufferDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBufferDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBufferDescriptor>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBufferDescriptor),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColor {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_WGPUColor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUColor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUColor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUColor>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUColor))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUColor>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUColor>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUColor>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUColor>())).a as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColor),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandBufferDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUCommandBufferDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUCommandBufferDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUCommandBufferDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUCommandBufferDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUCommandBufferDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCommandBufferDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandBufferDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCommandBufferDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandBufferDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCommandEncoderDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUCommandEncoderDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUCommandEncoderDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUCommandEncoderDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUCommandEncoderDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUCommandEncoderDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCommandEncoderDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandEncoderDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCommandEncoderDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCommandEncoderDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePassDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUComputePassDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUComputePassDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUComputePassDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUComputePassDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUComputePassDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePassDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePassDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePassDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePassDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUCreateBufferMappedResult {
    pub buffer: WGPUBuffer,
    pub dataLength: u64,
    pub data: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout_WGPUCreateBufferMappedResult() {
    assert_eq!(
        ::core::mem::size_of::<WGPUCreateBufferMappedResult>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUCreateBufferMappedResult))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUCreateBufferMappedResult>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUCreateBufferMappedResult))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCreateBufferMappedResult>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCreateBufferMappedResult),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCreateBufferMappedResult>())).dataLength as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCreateBufferMappedResult),
            "::",
            stringify!(dataLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUCreateBufferMappedResult>())).data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUCreateBufferMappedResult),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDeviceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
}
#[test]
fn bindgen_test_layout_WGPUDeviceDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUDeviceDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(WGPUDeviceDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUDeviceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUDeviceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDeviceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDeviceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_WGPUExtent3D() {
    assert_eq!(
        ::core::mem::size_of::<WGPUExtent3D>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUExtent3D))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUExtent3D>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUExtent3D))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUExtent3D>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUExtent3D>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUExtent3D>())).depth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUExtent3D),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUFenceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub initialValue: u64,
}
#[test]
fn bindgen_test_layout_WGPUFenceDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUFenceDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUFenceDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUFenceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUFenceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUFenceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUFenceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUFenceDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUFenceDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUFenceDescriptor>())).initialValue as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUFenceDescriptor),
            "::",
            stringify!(initialValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUInstanceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
}
#[test]
fn bindgen_test_layout_WGPUInstanceDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUInstanceDescriptor>(),
        8usize,
        concat!("Size of: ", stringify!(WGPUInstanceDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUInstanceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUInstanceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUInstanceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUInstanceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUOrigin3D {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[test]
fn bindgen_test_layout_WGPUOrigin3D() {
    assert_eq!(
        ::core::mem::size_of::<WGPUOrigin3D>(),
        12usize,
        concat!("Size of: ", stringify!(WGPUOrigin3D))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUOrigin3D>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUOrigin3D))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUOrigin3D>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUOrigin3D>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUOrigin3D>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUOrigin3D),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUPipelineLayoutDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub bindGroupLayoutCount: u32,
    pub bindGroupLayouts: *const WGPUBindGroupLayout,
}
#[test]
fn bindgen_test_layout_WGPUPipelineLayoutDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUPipelineLayoutDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUPipelineLayoutDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUPipelineLayoutDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUPipelineLayoutDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUPipelineLayoutDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUPipelineLayoutDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUPipelineLayoutDescriptor>())).bindGroupLayoutCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(bindGroupLayoutCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUPipelineLayoutDescriptor>())).bindGroupLayouts as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUPipelineLayoutDescriptor),
            "::",
            stringify!(bindGroupLayouts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUProgrammableStageDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub module: WGPUShaderModule,
    pub entryPoint: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUProgrammableStageDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUProgrammableStageDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUProgrammableStageDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUProgrammableStageDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUProgrammableStageDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUProgrammableStageDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUProgrammableStageDescriptor>())).module as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUProgrammableStageDescriptor>())).entryPoint as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUProgrammableStageDescriptor),
            "::",
            stringify!(entryPoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURasterizationStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub frontFace: WGPUFrontFace,
    pub cullMode: WGPUCullMode,
    pub depthBias: i32,
    pub depthBiasSlopeScale: f32,
    pub depthBiasClamp: f32,
}
#[test]
fn bindgen_test_layout_WGPURasterizationStateDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURasterizationStateDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPURasterizationStateDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURasterizationStateDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURasterizationStateDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).frontFace as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(frontFace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).cullMode as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(cullMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).depthBias as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBias)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).depthBiasSlopeScale
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBiasSlopeScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURasterizationStateDescriptor>())).depthBiasClamp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURasterizationStateDescriptor),
            "::",
            stringify!(depthBiasClamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPURenderBundleDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderBundleDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPURenderBundleDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderBundleDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderBundleDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderBundleEncoderDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub colorFormatsCount: u32,
    pub colorFormats: *const WGPUTextureFormat,
    pub depthStencilFormat: WGPUTextureFormat,
    pub sampleCount: u32,
}
#[test]
fn bindgen_test_layout_WGPURenderBundleEncoderDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderBundleEncoderDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPURenderBundleEncoderDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderBundleEncoderDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderBundleEncoderDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).label as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).colorFormatsCount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(colorFormatsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).colorFormats as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(colorFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).depthStencilFormat
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(depthStencilFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderBundleEncoderDescriptor>())).sampleCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderBundleEncoderDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDepthStencilAttachmentDescriptor {
    pub attachment: WGPUTextureView,
    pub depthLoadOp: WGPULoadOp,
    pub depthStoreOp: WGPUStoreOp,
    pub clearDepth: f32,
    pub stencilLoadOp: WGPULoadOp,
    pub stencilStoreOp: WGPUStoreOp,
    pub clearStencil: u32,
}
#[test]
fn bindgen_test_layout_WGPURenderPassDepthStencilAttachmentDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderPassDepthStencilAttachmentDescriptor>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderPassDepthStencilAttachmentDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).attachment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).depthLoadOp
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(depthLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).depthStoreOp
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(depthStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).clearDepth
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(clearDepth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>()))
                .stencilLoadOp as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>()))
                .stencilStoreOp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDepthStencilAttachmentDescriptor>())).clearStencil
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDepthStencilAttachmentDescriptor),
            "::",
            stringify!(clearStencil)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSamplerDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub addressModeU: WGPUAddressMode,
    pub addressModeV: WGPUAddressMode,
    pub addressModeW: WGPUAddressMode,
    pub magFilter: WGPUFilterMode,
    pub minFilter: WGPUFilterMode,
    pub mipmapFilter: WGPUFilterMode,
    pub lodMinClamp: f32,
    pub lodMaxClamp: f32,
    pub compare: WGPUCompareFunction,
}
#[test]
fn bindgen_test_layout_WGPUSamplerDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSamplerDescriptor>(),
        56usize,
        concat!("Size of: ", stringify!(WGPUSamplerDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSamplerDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSamplerDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).addressModeU as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).addressModeV as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeV)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).addressModeW as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(addressModeW)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).magFilter as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(magFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).minFilter as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(minFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).mipmapFilter as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(mipmapFilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).lodMinClamp as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(lodMinClamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).lodMaxClamp as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(lodMaxClamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSamplerDescriptor>())).compare as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSamplerDescriptor),
            "::",
            stringify!(compare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUShaderModuleDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub codeSize: u32,
    pub code: *const u32,
}
#[test]
fn bindgen_test_layout_WGPUShaderModuleDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUShaderModuleDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUShaderModuleDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUShaderModuleDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUShaderModuleDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUShaderModuleDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUShaderModuleDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUShaderModuleDescriptor>())).codeSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUShaderModuleDescriptor>())).code as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUShaderModuleDescriptor),
            "::",
            stringify!(code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUStencilStateFaceDescriptor {
    pub compare: WGPUCompareFunction,
    pub failOp: WGPUStencilOperation,
    pub depthFailOp: WGPUStencilOperation,
    pub passOp: WGPUStencilOperation,
}
#[test]
fn bindgen_test_layout_WGPUStencilStateFaceDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUStencilStateFaceDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUStencilStateFaceDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUStencilStateFaceDescriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(WGPUStencilStateFaceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUStencilStateFaceDescriptor>())).compare as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(compare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUStencilStateFaceDescriptor>())).failOp as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(failOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUStencilStateFaceDescriptor>())).depthFailOp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(depthFailOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUStencilStateFaceDescriptor>())).passOp as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUStencilStateFaceDescriptor),
            "::",
            stringify!(passOp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSurfaceDescriptor>(),
        16usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSurfaceDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSurfaceDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSurfaceDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptor),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromHTMLCanvasId {
    pub chain: WGPUChainedStruct,
    pub id: *const ::libc::c_char,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromHTMLCanvasId() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSurfaceDescriptorFromHTMLCanvasId>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(WGPUSurfaceDescriptorFromHTMLCanvasId)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSurfaceDescriptorFromHTMLCanvasId>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromHTMLCanvasId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromHTMLCanvasId>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromHTMLCanvasId),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromHTMLCanvasId>())).id as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromHTMLCanvasId),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromMetalLayer {
    pub chain: WGPUChainedStruct,
    pub layer: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromMetalLayer() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSurfaceDescriptorFromMetalLayer>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptorFromMetalLayer))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSurfaceDescriptorFromMetalLayer>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromMetalLayer>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromMetalLayer>())).layer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromMetalLayer),
            "::",
            stringify!(layer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromWindowsHWND {
    pub chain: WGPUChainedStruct,
    pub hinstance: *mut ::libc::c_void,
    pub hwnd: *mut ::libc::c_void,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromWindowsHWND() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSurfaceDescriptorFromWindowsHWND>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSurfaceDescriptorFromWindowsHWND>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).chain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).hinstance as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(hinstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromWindowsHWND>())).hwnd as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromWindowsHWND),
            "::",
            stringify!(hwnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSurfaceDescriptorFromXlib {
    pub chain: WGPUChainedStruct,
    pub display: *mut ::libc::c_void,
    pub window: u32,
}
#[test]
fn bindgen_test_layout_WGPUSurfaceDescriptorFromXlib() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSurfaceDescriptorFromXlib>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUSurfaceDescriptorFromXlib))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSurfaceDescriptorFromXlib>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSurfaceDescriptorFromXlib))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).chain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).display as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSurfaceDescriptorFromXlib>())).window as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSurfaceDescriptorFromXlib),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUSwapChainDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub usage: WGPUTextureUsageFlags,
    pub format: WGPUTextureFormat,
    pub width: u32,
    pub height: u32,
    pub presentMode: WGPUPresentMode,
}
#[test]
fn bindgen_test_layout_WGPUSwapChainDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUSwapChainDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUSwapChainDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUSwapChainDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUSwapChainDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).height as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUSwapChainDescriptor>())).presentMode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUSwapChainDescriptor),
            "::",
            stringify!(presentMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureViewDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub format: WGPUTextureFormat,
    pub dimension: WGPUTextureViewDimension,
    pub baseMipLevel: u32,
    pub mipLevelCount: u32,
    pub baseArrayLayer: u32,
    pub arrayLayerCount: u32,
    pub aspect: WGPUTextureAspect,
}
#[test]
fn bindgen_test_layout_WGPUTextureViewDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUTextureViewDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUTextureViewDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUTextureViewDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureViewDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).dimension as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).baseMipLevel as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(baseMipLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).mipLevelCount as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(mipLevelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).baseArrayLayer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).arrayLayerCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(arrayLayerCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureViewDescriptor>())).aspect as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureViewDescriptor),
            "::",
            stringify!(aspect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexAttributeDescriptor {
    pub format: WGPUVertexFormat,
    pub offset: u64,
    pub shaderLocation: u32,
}
#[test]
fn bindgen_test_layout_WGPUVertexAttributeDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUVertexAttributeDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexAttributeDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUVertexAttributeDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUVertexAttributeDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexAttributeDescriptor>())).format as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexAttributeDescriptor>())).offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexAttributeDescriptor>())).shaderLocation as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexAttributeDescriptor),
            "::",
            stringify!(shaderLocation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub layout: WGPUBindGroupLayout,
    pub bindingCount: u32,
    pub bindings: *const WGPUBindGroupBinding,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBindGroupDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUBindGroupDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBindGroupDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUBindGroupDescriptor>())).layout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupDescriptor>())).bindingCount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupDescriptor>())).bindings as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupDescriptor),
            "::",
            stringify!(bindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUBindGroupLayoutDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub bindingCount: u32,
    pub bindings: *const WGPUBindGroupLayoutBinding,
}
#[test]
fn bindgen_test_layout_WGPUBindGroupLayoutDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUBindGroupLayoutDescriptor>(),
        32usize,
        concat!("Size of: ", stringify!(WGPUBindGroupLayoutDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUBindGroupLayoutDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUBindGroupLayoutDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutDescriptor>())).bindingCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUBindGroupLayoutDescriptor>())).bindings as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUBindGroupLayoutDescriptor),
            "::",
            stringify!(bindings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUColorStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub alphaBlend: WGPUBlendDescriptor,
    pub colorBlend: WGPUBlendDescriptor,
    pub writeMask: WGPUColorWriteMaskFlags,
}
#[test]
fn bindgen_test_layout_WGPUColorStateDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUColorStateDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUColorStateDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUColorStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUColorStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUColorStateDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUColorStateDescriptor>())).format as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUColorStateDescriptor>())).alphaBlend as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(alphaBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUColorStateDescriptor>())).colorBlend as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(colorBlend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUColorStateDescriptor>())).writeMask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUColorStateDescriptor),
            "::",
            stringify!(writeMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUComputePipelineDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub layout: WGPUPipelineLayout,
    pub computeStage: WGPUProgrammableStageDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUComputePipelineDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUComputePipelineDescriptor>(),
        48usize,
        concat!("Size of: ", stringify!(WGPUComputePipelineDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUComputePipelineDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUComputePipelineDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePipelineDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePipelineDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePipelineDescriptor>())).layout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUComputePipelineDescriptor>())).computeStage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUComputePipelineDescriptor),
            "::",
            stringify!(computeStage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUDepthStencilStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub format: WGPUTextureFormat,
    pub depthWriteEnabled: bool,
    pub depthCompare: WGPUCompareFunction,
    pub stencilFront: WGPUStencilStateFaceDescriptor,
    pub stencilBack: WGPUStencilStateFaceDescriptor,
    pub stencilReadMask: u32,
    pub stencilWriteMask: u32,
}
#[test]
fn bindgen_test_layout_WGPUDepthStencilStateDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUDepthStencilStateDescriptor>(),
        64usize,
        concat!("Size of: ", stringify!(WGPUDepthStencilStateDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUDepthStencilStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUDepthStencilStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).format as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).depthWriteEnabled
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(depthWriteEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).depthCompare as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(depthCompare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilFront as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilFront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilBack as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilBack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilReadMask as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilReadMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUDepthStencilStateDescriptor>())).stencilWriteMask
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUDepthStencilStateDescriptor),
            "::",
            stringify!(stencilWriteMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassColorAttachmentDescriptor {
    pub attachment: WGPUTextureView,
    pub resolveTarget: WGPUTextureView,
    pub loadOp: WGPULoadOp,
    pub storeOp: WGPUStoreOp,
    pub clearColor: WGPUColor,
}
#[test]
fn bindgen_test_layout_WGPURenderPassColorAttachmentDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderPassColorAttachmentDescriptor>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderPassColorAttachmentDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPURenderPassColorAttachmentDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).attachment
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).resolveTarget
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(resolveTarget)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).loadOp as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).storeOp as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassColorAttachmentDescriptor>())).clearColor
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassColorAttachmentDescriptor),
            "::",
            stringify!(clearColor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureCopyView {
    pub nextInChain: *const WGPUChainedStruct,
    pub texture: WGPUTexture,
    pub mipLevel: u32,
    pub arrayLayer: u32,
    pub origin: WGPUOrigin3D,
}
#[test]
fn bindgen_test_layout_WGPUTextureCopyView() {
    assert_eq!(
        ::core::mem::size_of::<WGPUTextureCopyView>(),
        40usize,
        concat!("Size of: ", stringify!(WGPUTextureCopyView))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUTextureCopyView>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureCopyView))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureCopyView>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureCopyView>())).texture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureCopyView>())).mipLevel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureCopyView>())).arrayLayer as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(arrayLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureCopyView>())).origin as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureCopyView),
            "::",
            stringify!(origin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUTextureDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub usage: WGPUTextureUsageFlags,
    pub dimension: WGPUTextureDimension,
    pub size: WGPUExtent3D,
    pub arrayLayerCount: u32,
    pub format: WGPUTextureFormat,
    pub mipLevelCount: u32,
    pub sampleCount: u32,
}
#[test]
fn bindgen_test_layout_WGPUTextureDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUTextureDescriptor>(),
        56usize,
        concat!("Size of: ", stringify!(WGPUTextureDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUTextureDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUTextureDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureDescriptor>())).usage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureDescriptor>())).dimension as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(dimension)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureDescriptor>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureDescriptor>())).arrayLayerCount as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(arrayLayerCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPUTextureDescriptor>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureDescriptor>())).mipLevelCount as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(mipLevelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUTextureDescriptor>())).sampleCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUTextureDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexBufferLayoutDescriptor {
    pub arrayStride: u64,
    pub stepMode: WGPUInputStepMode,
    pub attributeCount: u32,
    pub attributes: *const WGPUVertexAttributeDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUVertexBufferLayoutDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUVertexBufferLayoutDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexBufferLayoutDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUVertexBufferLayoutDescriptor>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(WGPUVertexBufferLayoutDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).arrayStride as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(arrayStride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).stepMode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(stepMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).attributeCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(attributeCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexBufferLayoutDescriptor>())).attributes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexBufferLayoutDescriptor),
            "::",
            stringify!(attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPassDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub colorAttachmentCount: u32,
    pub colorAttachments: *const WGPURenderPassColorAttachmentDescriptor,
    pub depthStencilAttachment: *const WGPURenderPassDepthStencilAttachmentDescriptor,
}
#[test]
fn bindgen_test_layout_WGPURenderPassDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderPassDescriptor>(),
        40usize,
        concat!("Size of: ", stringify!(WGPURenderPassDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderPassDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderPassDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WGPURenderPassDescriptor>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDescriptor>())).colorAttachmentCount as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDescriptor>())).colorAttachments as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(colorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPassDescriptor>())).depthStencilAttachment as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPassDescriptor),
            "::",
            stringify!(depthStencilAttachment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPUVertexStateDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub indexFormat: WGPUIndexFormat,
    pub vertexBufferCount: u32,
    pub vertexBuffers: *const WGPUVertexBufferLayoutDescriptor,
}
#[test]
fn bindgen_test_layout_WGPUVertexStateDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPUVertexStateDescriptor>(),
        24usize,
        concat!("Size of: ", stringify!(WGPUVertexStateDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPUVertexStateDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPUVertexStateDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexStateDescriptor>())).nextInChain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexStateDescriptor>())).indexFormat as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(indexFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexStateDescriptor>())).vertexBufferCount as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(vertexBufferCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPUVertexStateDescriptor>())).vertexBuffers as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPUVertexStateDescriptor),
            "::",
            stringify!(vertexBuffers)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WGPURenderPipelineDescriptor {
    pub nextInChain: *const WGPUChainedStruct,
    pub label: *const ::libc::c_char,
    pub layout: WGPUPipelineLayout,
    pub vertexStage: WGPUProgrammableStageDescriptor,
    pub fragmentStage: *const WGPUProgrammableStageDescriptor,
    pub vertexState: *const WGPUVertexStateDescriptor,
    pub primitiveTopology: WGPUPrimitiveTopology,
    pub rasterizationState: *const WGPURasterizationStateDescriptor,
    pub sampleCount: u32,
    pub depthStencilState: *const WGPUDepthStencilStateDescriptor,
    pub colorStateCount: u32,
    pub colorStates: *const WGPUColorStateDescriptor,
    pub sampleMask: u32,
    pub alphaToCoverageEnabled: bool,
}
#[test]
fn bindgen_test_layout_WGPURenderPipelineDescriptor() {
    assert_eq!(
        ::core::mem::size_of::<WGPURenderPipelineDescriptor>(),
        120usize,
        concat!("Size of: ", stringify!(WGPURenderPipelineDescriptor))
    );
    assert_eq!(
        ::core::mem::align_of::<WGPURenderPipelineDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(WGPURenderPipelineDescriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).nextInChain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(nextInChain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).label as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).layout as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).vertexStage as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(vertexStage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).fragmentStage as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(fragmentStage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).vertexState as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(vertexState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).primitiveTopology as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(primitiveTopology)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).rasterizationState as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(rasterizationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).sampleCount as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).depthStencilState as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(depthStencilState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).colorStateCount as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(colorStateCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).colorStates as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(colorStates)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).sampleMask as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(sampleMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<WGPURenderPipelineDescriptor>())).alphaToCoverageEnabled
                as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(WGPURenderPipelineDescriptor),
            "::",
            stringify!(alphaToCoverageEnabled)
        )
    );
}
pub type WGPUBufferCreateMappedCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUBufferMapAsyncStatus,
        result: WGPUCreateBufferMappedResult,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUBufferMapReadCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUBufferMapAsyncStatus,
        data: *const ::libc::c_void,
        dataLength: u64,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUBufferMapWriteCallback = ::core::option::Option<
    unsafe extern "C" fn(
        status: WGPUBufferMapAsyncStatus,
        data: *mut ::libc::c_void,
        dataLength: u64,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUDeviceLostCallback = ::core::option::Option<
    unsafe extern "C" fn(message: *const ::libc::c_char, userdata: *mut ::libc::c_void),
>;
pub type WGPUErrorCallback = ::core::option::Option<
    unsafe extern "C" fn(
        type_: WGPUErrorType,
        message: *const ::libc::c_char,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUFenceOnCompletionCallback = ::core::option::Option<
    unsafe extern "C" fn(status: WGPUFenceCompletionStatus, userdata: *mut ::libc::c_void),
>;
pub type WGPURequestAdapterCallback = ::core::option::Option<
    unsafe extern "C" fn(result: WGPUAdapter, userdata: *mut ::libc::c_void),
>;
pub type WGPURequestDeviceCallback =
    ::core::option::Option<unsafe extern "C" fn(result: WGPUDevice, userdata: *mut ::libc::c_void)>;
pub type WGPUSurfaceGetPreferredFormatCallback = ::core::option::Option<
    unsafe extern "C" fn(format: WGPUTextureFormat, userdata: *mut ::libc::c_void),
>;
pub type WGPUProc = ::core::option::Option<unsafe extern "C" fn()>;
pub type WGPUProcCreateInstance = ::core::option::Option<
    unsafe extern "C" fn(descriptor: *const WGPUInstanceDescriptor) -> WGPUInstance,
>;
pub type WGPUProcGetProcAddress = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, procName: *const ::libc::c_char) -> WGPUProc,
>;
pub type WGPUProcAdapterGetProperties = ::core::option::Option<
    unsafe extern "C" fn(adapter: WGPUAdapter, properties: *mut WGPUAdapterProperties),
>;
pub type WGPUProcAdapterRequestDevice = ::core::option::Option<
    unsafe extern "C" fn(
        adapter: WGPUAdapter,
        descriptor: *const WGPUDeviceDescriptor,
        callback: WGPURequestDeviceCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcBufferDestroy = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcBufferMapReadAsync = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        callback: WGPUBufferMapReadCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcBufferMapWriteAsync = ::core::option::Option<
    unsafe extern "C" fn(
        buffer: WGPUBuffer,
        callback: WGPUBufferMapWriteCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcBufferUnmap = ::core::option::Option<unsafe extern "C" fn(buffer: WGPUBuffer)>;
pub type WGPUProcCommandEncoderBeginComputePass = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUComputePassDescriptor,
    ) -> WGPUComputePassEncoder,
>;
pub type WGPUProcCommandEncoderBeginRenderPass = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPURenderPassDescriptor,
    ) -> WGPURenderPassEncoder,
>;
pub type WGPUProcCommandEncoderCopyBufferToBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: WGPUBuffer,
        sourceOffset: u64,
        destination: WGPUBuffer,
        destinationOffset: u64,
        size: u64,
    ),
>;
pub type WGPUProcCommandEncoderCopyBufferToTexture = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUBufferCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUBufferCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderCopyTextureToTexture = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    ),
>;
pub type WGPUProcCommandEncoderFinish = ::core::option::Option<
    unsafe extern "C" fn(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUCommandBufferDescriptor,
    ) -> WGPUCommandBuffer,
>;
pub type WGPUProcCommandEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder, groupLabel: *const ::libc::c_char),
>;
pub type WGPUProcCommandEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder)>;
pub type WGPUProcCommandEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(commandEncoder: WGPUCommandEncoder, groupLabel: *const ::libc::c_char),
>;
pub type WGPUProcComputePassEncoderDispatch = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, x: u32, y: u32, z: u32),
>;
pub type WGPUProcComputePassEncoderDispatchIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcComputePassEncoderEndPass =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcComputePassEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder)>;
pub type WGPUProcComputePassEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcComputePassEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        computePassEncoder: WGPUComputePassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcComputePassEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(computePassEncoder: WGPUComputePassEncoder, pipeline: WGPUComputePipeline),
>;
pub type WGPUProcComputePipelineGetBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        computePipeline: WGPUComputePipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcDeviceCreateBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupDescriptor,
    ) -> WGPUBindGroup,
>;
pub type WGPUProcDeviceCreateBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupLayoutDescriptor,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcDeviceCreateBuffer = ::core::option::Option<
    unsafe extern "C" fn(device: WGPUDevice, descriptor: *const WGPUBufferDescriptor) -> WGPUBuffer,
>;
pub type WGPUProcDeviceCreateBufferMapped = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
    ) -> WGPUCreateBufferMappedResult,
>;
pub type WGPUProcDeviceCreateBufferMappedAsync = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
        callback: WGPUBufferCreateMappedCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcDeviceCreateCommandEncoder = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUCommandEncoderDescriptor,
    ) -> WGPUCommandEncoder,
>;
pub type WGPUProcDeviceCreateComputePipeline = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
    ) -> WGPUComputePipeline,
>;
pub type WGPUProcDeviceCreatePipelineLayout = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUPipelineLayoutDescriptor,
    ) -> WGPUPipelineLayout,
>;
pub type WGPUProcDeviceCreateQueue =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice) -> WGPUQueue>;
pub type WGPUProcDeviceCreateRenderBundleEncoder = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderBundleEncoderDescriptor,
    ) -> WGPURenderBundleEncoder,
>;
pub type WGPUProcDeviceCreateRenderPipeline = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
    ) -> WGPURenderPipeline,
>;
pub type WGPUProcDeviceCreateSampler = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUSamplerDescriptor,
    ) -> WGPUSampler,
>;
pub type WGPUProcDeviceCreateShaderModule = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUShaderModuleDescriptor,
    ) -> WGPUShaderModule,
>;
pub type WGPUProcDeviceCreateSwapChain = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        surface: WGPUSurface,
        descriptor: *const WGPUSwapChainDescriptor,
    ) -> WGPUSwapChain,
>;
pub type WGPUProcDeviceCreateTexture = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        descriptor: *const WGPUTextureDescriptor,
    ) -> WGPUTexture,
>;
pub type WGPUProcDevicePopErrorScope = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::libc::c_void,
    ) -> bool,
>;
pub type WGPUProcDevicePushErrorScope =
    ::core::option::Option<unsafe extern "C" fn(device: WGPUDevice, filter: WGPUErrorFilter)>;
pub type WGPUProcDeviceSetDeviceLostCallback = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUDeviceLostCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcDeviceSetUncapturedErrorCallback = ::core::option::Option<
    unsafe extern "C" fn(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcFenceGetCompletedValue =
    ::core::option::Option<unsafe extern "C" fn(fence: WGPUFence) -> u64>;
pub type WGPUProcFenceOnCompletion = ::core::option::Option<
    unsafe extern "C" fn(
        fence: WGPUFence,
        value: u64,
        callback: WGPUFenceOnCompletionCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcInstanceCreateSurface = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        descriptor: *const WGPUSurfaceDescriptor,
    ) -> WGPUSurface,
>;
pub type WGPUProcInstanceProcessEvents =
    ::core::option::Option<unsafe extern "C" fn(instance: WGPUInstance)>;
pub type WGPUProcInstanceRequestAdapter = ::core::option::Option<
    unsafe extern "C" fn(
        instance: WGPUInstance,
        descriptor: *const WGPUAdapterDescriptor,
        callback: WGPURequestAdapterCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcQueueCreateFence = ::core::option::Option<
    unsafe extern "C" fn(queue: WGPUQueue, descriptor: *const WGPUFenceDescriptor) -> WGPUFence,
>;
pub type WGPUProcQueueSignal = ::core::option::Option<
    unsafe extern "C" fn(queue: WGPUQueue, fence: WGPUFence, signalValue: u64),
>;
pub type WGPUProcQueueSubmit = ::core::option::Option<
    unsafe extern "C" fn(queue: WGPUQueue, commandCount: u32, commands: *const WGPUCommandBuffer),
>;
pub type WGPUProcRenderBundleEncoderDraw = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexed = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndexedIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderDrawIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderFinish = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        descriptor: *const WGPURenderBundleDescriptor,
    ) -> WGPURenderBundle,
>;
pub type WGPUProcRenderBundleEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcRenderBundleEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(renderBundleEncoder: WGPURenderBundleEncoder)>;
pub type WGPUProcRenderBundleEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetIndexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        buffer: WGPUBuffer,
        offset: u64,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        pipeline: WGPURenderPipeline,
    ),
>;
pub type WGPUProcRenderBundleEncoderSetVertexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderBundleEncoder: WGPURenderBundleEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderDraw = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexed = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndexedIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderDrawIndirect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderEndPass =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderExecuteBundles = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        bundlesCount: u32,
        bundles: *const WGPURenderBundle,
    ),
>;
pub type WGPUProcRenderPassEncoderInsertDebugMarker = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcRenderPassEncoderPopDebugGroup =
    ::core::option::Option<unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder)>;
pub type WGPUProcRenderPassEncoderPushDebugGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: *const ::libc::c_char,
    ),
>;
pub type WGPUProcRenderPassEncoderSetBindGroup = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetBlendColor = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, color: *const WGPUColor),
>;
pub type WGPUProcRenderPassEncoderSetIndexBuffer = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, buffer: WGPUBuffer, offset: u64),
>;
pub type WGPUProcRenderPassEncoderSetPipeline = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, pipeline: WGPURenderPipeline),
>;
pub type WGPUProcRenderPassEncoderSetScissorRect = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ),
>;
pub type WGPUProcRenderPassEncoderSetStencilReference = ::core::option::Option<
    unsafe extern "C" fn(renderPassEncoder: WGPURenderPassEncoder, reference: u32),
>;
pub type WGPUProcRenderPassEncoderSetVertexBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
    ),
>;
pub type WGPUProcRenderPassEncoderSetViewport = ::core::option::Option<
    unsafe extern "C" fn(
        renderPassEncoder: WGPURenderPassEncoder,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        minDepth: f32,
        maxDepth: f32,
    ),
>;
pub type WGPUProcRenderPipelineGetBindGroupLayout = ::core::option::Option<
    unsafe extern "C" fn(
        renderPipeline: WGPURenderPipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout,
>;
pub type WGPUProcSurfaceGetPreferredFormat = ::core::option::Option<
    unsafe extern "C" fn(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        callback: WGPUSurfaceGetPreferredFormatCallback,
        userdata: *mut ::libc::c_void,
    ),
>;
pub type WGPUProcSwapChainGetCurrentTextureView =
    ::core::option::Option<unsafe extern "C" fn(swapChain: WGPUSwapChain) -> WGPUTextureView>;
pub type WGPUProcSwapChainPresent =
    ::core::option::Option<unsafe extern "C" fn(swapChain: WGPUSwapChain)>;
pub type WGPUProcTextureCreateView = ::core::option::Option<
    unsafe extern "C" fn(
        texture: WGPUTexture,
        descriptor: *const WGPUTextureViewDescriptor,
    ) -> WGPUTextureView,
>;
pub type WGPUProcTextureDestroy =
    ::core::option::Option<unsafe extern "C" fn(texture: WGPUTexture)>;
extern "C" {
    pub fn wgpuCreateInstance(descriptor: *const WGPUInstanceDescriptor) -> WGPUInstance;
}
extern "C" {
    pub fn wgpuGetProcAddress(device: WGPUDevice, procName: *const ::libc::c_char) -> WGPUProc;
}
extern "C" {
    pub fn wgpuAdapterGetProperties(adapter: WGPUAdapter, properties: *mut WGPUAdapterProperties);
}
extern "C" {
    pub fn wgpuAdapterRequestDevice(
        adapter: WGPUAdapter,
        descriptor: *const WGPUDeviceDescriptor,
        callback: WGPURequestDeviceCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuBufferDestroy(buffer: WGPUBuffer);
}
extern "C" {
    pub fn wgpuBufferMapReadAsync(
        buffer: WGPUBuffer,
        callback: WGPUBufferMapReadCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuBufferMapWriteAsync(
        buffer: WGPUBuffer,
        callback: WGPUBufferMapWriteCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuBufferUnmap(buffer: WGPUBuffer);
}
extern "C" {
    pub fn wgpuCommandEncoderBeginComputePass(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUComputePassDescriptor,
    ) -> WGPUComputePassEncoder;
}
extern "C" {
    pub fn wgpuCommandEncoderBeginRenderPass(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPURenderPassDescriptor,
    ) -> WGPURenderPassEncoder;
}
extern "C" {
    pub fn wgpuCommandEncoderCopyBufferToBuffer(
        commandEncoder: WGPUCommandEncoder,
        source: WGPUBuffer,
        sourceOffset: u64,
        destination: WGPUBuffer,
        destinationOffset: u64,
        size: u64,
    );
}
extern "C" {
    pub fn wgpuCommandEncoderCopyBufferToTexture(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUBufferCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    );
}
extern "C" {
    pub fn wgpuCommandEncoderCopyTextureToBuffer(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUBufferCopyView,
        copySize: *const WGPUExtent3D,
    );
}
extern "C" {
    pub fn wgpuCommandEncoderCopyTextureToTexture(
        commandEncoder: WGPUCommandEncoder,
        source: *const WGPUTextureCopyView,
        destination: *const WGPUTextureCopyView,
        copySize: *const WGPUExtent3D,
    );
}
extern "C" {
    pub fn wgpuCommandEncoderFinish(
        commandEncoder: WGPUCommandEncoder,
        descriptor: *const WGPUCommandBufferDescriptor,
    ) -> WGPUCommandBuffer;
}
extern "C" {
    pub fn wgpuCommandEncoderInsertDebugMarker(
        commandEncoder: WGPUCommandEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuCommandEncoderPopDebugGroup(commandEncoder: WGPUCommandEncoder);
}
extern "C" {
    pub fn wgpuCommandEncoderPushDebugGroup(
        commandEncoder: WGPUCommandEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderDispatch(
        computePassEncoder: WGPUComputePassEncoder,
        x: u32,
        y: u32,
        z: u32,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderDispatchIndirect(
        computePassEncoder: WGPUComputePassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderEndPass(computePassEncoder: WGPUComputePassEncoder);
}
extern "C" {
    pub fn wgpuComputePassEncoderInsertDebugMarker(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderPopDebugGroup(computePassEncoder: WGPUComputePassEncoder);
}
extern "C" {
    pub fn wgpuComputePassEncoderPushDebugGroup(
        computePassEncoder: WGPUComputePassEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderSetBindGroup(
        computePassEncoder: WGPUComputePassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    );
}
extern "C" {
    pub fn wgpuComputePassEncoderSetPipeline(
        computePassEncoder: WGPUComputePassEncoder,
        pipeline: WGPUComputePipeline,
    );
}
extern "C" {
    pub fn wgpuComputePipelineGetBindGroupLayout(
        computePipeline: WGPUComputePipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout;
}
extern "C" {
    pub fn wgpuDeviceCreateBindGroup(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupDescriptor,
    ) -> WGPUBindGroup;
}
extern "C" {
    pub fn wgpuDeviceCreateBindGroupLayout(
        device: WGPUDevice,
        descriptor: *const WGPUBindGroupLayoutDescriptor,
    ) -> WGPUBindGroupLayout;
}
extern "C" {
    pub fn wgpuDeviceCreateBuffer(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
    ) -> WGPUBuffer;
}
extern "C" {
    pub fn wgpuDeviceCreateBufferMapped(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
    ) -> WGPUCreateBufferMappedResult;
}
extern "C" {
    pub fn wgpuDeviceCreateBufferMappedAsync(
        device: WGPUDevice,
        descriptor: *const WGPUBufferDescriptor,
        callback: WGPUBufferCreateMappedCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuDeviceCreateCommandEncoder(
        device: WGPUDevice,
        descriptor: *const WGPUCommandEncoderDescriptor,
    ) -> WGPUCommandEncoder;
}
extern "C" {
    pub fn wgpuDeviceCreateComputePipeline(
        device: WGPUDevice,
        descriptor: *const WGPUComputePipelineDescriptor,
    ) -> WGPUComputePipeline;
}
extern "C" {
    pub fn wgpuDeviceCreatePipelineLayout(
        device: WGPUDevice,
        descriptor: *const WGPUPipelineLayoutDescriptor,
    ) -> WGPUPipelineLayout;
}
extern "C" {
    pub fn wgpuDeviceCreateQueue(device: WGPUDevice) -> WGPUQueue;
}
extern "C" {
    pub fn wgpuDeviceCreateRenderBundleEncoder(
        device: WGPUDevice,
        descriptor: *const WGPURenderBundleEncoderDescriptor,
    ) -> WGPURenderBundleEncoder;
}
extern "C" {
    pub fn wgpuDeviceCreateRenderPipeline(
        device: WGPUDevice,
        descriptor: *const WGPURenderPipelineDescriptor,
    ) -> WGPURenderPipeline;
}
extern "C" {
    pub fn wgpuDeviceCreateSampler(
        device: WGPUDevice,
        descriptor: *const WGPUSamplerDescriptor,
    ) -> WGPUSampler;
}
extern "C" {
    pub fn wgpuDeviceCreateShaderModule(
        device: WGPUDevice,
        descriptor: *const WGPUShaderModuleDescriptor,
    ) -> WGPUShaderModule;
}
extern "C" {
    pub fn wgpuDeviceCreateSwapChain(
        device: WGPUDevice,
        surface: WGPUSurface,
        descriptor: *const WGPUSwapChainDescriptor,
    ) -> WGPUSwapChain;
}
extern "C" {
    pub fn wgpuDeviceCreateTexture(
        device: WGPUDevice,
        descriptor: *const WGPUTextureDescriptor,
    ) -> WGPUTexture;
}
extern "C" {
    pub fn wgpuDevicePopErrorScope(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::libc::c_void,
    ) -> bool;
}
extern "C" {
    pub fn wgpuDevicePushErrorScope(device: WGPUDevice, filter: WGPUErrorFilter);
}
extern "C" {
    pub fn wgpuDeviceSetDeviceLostCallback(
        device: WGPUDevice,
        callback: WGPUDeviceLostCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuDeviceSetUncapturedErrorCallback(
        device: WGPUDevice,
        callback: WGPUErrorCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuFenceGetCompletedValue(fence: WGPUFence) -> u64;
}
extern "C" {
    pub fn wgpuFenceOnCompletion(
        fence: WGPUFence,
        value: u64,
        callback: WGPUFenceOnCompletionCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuInstanceCreateSurface(
        instance: WGPUInstance,
        descriptor: *const WGPUSurfaceDescriptor,
    ) -> WGPUSurface;
}
extern "C" {
    pub fn wgpuInstanceProcessEvents(instance: WGPUInstance);
}
extern "C" {
    pub fn wgpuInstanceRequestAdapter(
        instance: WGPUInstance,
        descriptor: *const WGPUAdapterDescriptor,
        callback: WGPURequestAdapterCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuQueueCreateFence(
        queue: WGPUQueue,
        descriptor: *const WGPUFenceDescriptor,
    ) -> WGPUFence;
}
extern "C" {
    pub fn wgpuQueueSignal(queue: WGPUQueue, fence: WGPUFence, signalValue: u64);
}
extern "C" {
    pub fn wgpuQueueSubmit(queue: WGPUQueue, commandCount: u32, commands: *const WGPUCommandBuffer);
}
extern "C" {
    pub fn wgpuRenderBundleEncoderDraw(
        renderBundleEncoder: WGPURenderBundleEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndexed(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndexedIndirect(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderDrawIndirect(
        renderBundleEncoder: WGPURenderBundleEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderFinish(
        renderBundleEncoder: WGPURenderBundleEncoder,
        descriptor: *const WGPURenderBundleDescriptor,
    ) -> WGPURenderBundle;
}
extern "C" {
    pub fn wgpuRenderBundleEncoderInsertDebugMarker(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderPopDebugGroup(renderBundleEncoder: WGPURenderBundleEncoder);
}
extern "C" {
    pub fn wgpuRenderBundleEncoderPushDebugGroup(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderSetBindGroup(
        renderBundleEncoder: WGPURenderBundleEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderSetIndexBuffer(
        renderBundleEncoder: WGPURenderBundleEncoder,
        buffer: WGPUBuffer,
        offset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderSetPipeline(
        renderBundleEncoder: WGPURenderBundleEncoder,
        pipeline: WGPURenderPipeline,
    );
}
extern "C" {
    pub fn wgpuRenderBundleEncoderSetVertexBuffer(
        renderBundleEncoder: WGPURenderBundleEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderDraw(
        renderPassEncoder: WGPURenderPassEncoder,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndexed(
        renderPassEncoder: WGPURenderPassEncoder,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        baseVertex: i32,
        firstInstance: u32,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndexedIndirect(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderDrawIndirect(
        renderPassEncoder: WGPURenderPassEncoder,
        indirectBuffer: WGPUBuffer,
        indirectOffset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderEndPass(renderPassEncoder: WGPURenderPassEncoder);
}
extern "C" {
    pub fn wgpuRenderPassEncoderExecuteBundles(
        renderPassEncoder: WGPURenderPassEncoder,
        bundlesCount: u32,
        bundles: *const WGPURenderBundle,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderInsertDebugMarker(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderPopDebugGroup(renderPassEncoder: WGPURenderPassEncoder);
}
extern "C" {
    pub fn wgpuRenderPassEncoderPushDebugGroup(
        renderPassEncoder: WGPURenderPassEncoder,
        groupLabel: *const ::libc::c_char,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetBindGroup(
        renderPassEncoder: WGPURenderPassEncoder,
        groupIndex: u32,
        group: WGPUBindGroup,
        dynamicOffsetCount: u32,
        dynamicOffsets: *const u32,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetBlendColor(
        renderPassEncoder: WGPURenderPassEncoder,
        color: *const WGPUColor,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetIndexBuffer(
        renderPassEncoder: WGPURenderPassEncoder,
        buffer: WGPUBuffer,
        offset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetPipeline(
        renderPassEncoder: WGPURenderPassEncoder,
        pipeline: WGPURenderPipeline,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetScissorRect(
        renderPassEncoder: WGPURenderPassEncoder,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetStencilReference(
        renderPassEncoder: WGPURenderPassEncoder,
        reference: u32,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetVertexBuffer(
        renderPassEncoder: WGPURenderPassEncoder,
        slot: u32,
        buffer: WGPUBuffer,
        offset: u64,
    );
}
extern "C" {
    pub fn wgpuRenderPassEncoderSetViewport(
        renderPassEncoder: WGPURenderPassEncoder,
        x: f32,
        y: f32,
        width: f32,
        height: f32,
        minDepth: f32,
        maxDepth: f32,
    );
}
extern "C" {
    pub fn wgpuRenderPipelineGetBindGroupLayout(
        renderPipeline: WGPURenderPipeline,
        groupIndex: u32,
    ) -> WGPUBindGroupLayout;
}
extern "C" {
    pub fn wgpuSurfaceGetPreferredFormat(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        callback: WGPUSurfaceGetPreferredFormatCallback,
        userdata: *mut ::libc::c_void,
    );
}
extern "C" {
    pub fn wgpuSwapChainGetCurrentTextureView(swapChain: WGPUSwapChain) -> WGPUTextureView;
}
extern "C" {
    pub fn wgpuSwapChainPresent(swapChain: WGPUSwapChain);
}
extern "C" {
    pub fn wgpuTextureCreateView(
        texture: WGPUTexture,
        descriptor: *const WGPUTextureViewDescriptor,
    ) -> WGPUTextureView;
}
extern "C" {
    pub fn wgpuTextureDestroy(texture: WGPUTexture);
}
