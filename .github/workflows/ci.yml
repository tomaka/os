name: Continuous integration

on: [push, pull_request]

jobs:
  build-modules:
    name: Build WASM modules
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-9
    steps:
    - uses: actions/checkout@v1
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-wasi
        override: true
    - name: Install a recent version of Clang
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main" >> /etc/apt/sources.list
        apt-get update
        apt-get install -y clang-9
    - name: Install CMake
      run: apt-get install -y cmake
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: cargo-registry-${{ hashFiles('modules/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: cargo-index-${{ hashFiles('modules/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: modules/target
        key: cargo-build-target-${{ hashFiles('modules/Cargo.lock') }}
    - name: Build modules
      run: cargo build --manifest-path ./modules/Cargo.toml --locked --verbose --release --target=wasm32-wasi
    - name: Upload WASM modules
      uses: actions/upload-artifact@v1
      with:
        name: wasm-modules
        path: modules/target/wasm32-wasi/release

  build-hosted:
    name: Build hosted kernel
    needs: build-modules
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-9
    steps:
    - uses: actions/checkout@v1
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-wasi
        override: true
    - name: Install a recent version of Clang
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main" >> /etc/apt/sources.list
        apt-get update
        apt-get install -y clang-9
    - name: Install CMake
      run: apt-get install -y cmake
    - name: Install Vulkan
      run: |
        apt-get update
        apt-get install -y libvulkan-dev
    - name: Download WASM modules
      uses: actions/download-artifact@v1
      with:
        name: wasm-modules
        path: modules/target/wasm32-wasi/release
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('Cargo.lock') }}
    - name: Build
      run: cargo build --workspace --exclude nametbd-standalone-kernel --locked --verbose
    - name: Run tests
      run: cargo test --workspace --exclude nametbd-standalone-kernel --locked --verbose

  build-standalone:
    name: Build standalone kernel
    needs: build-modules
    runs-on: ubuntu-latest
    container:
      image: rust
    steps:
    - uses: actions/checkout@v1
    - name: Download WASM modules
      uses: actions/download-artifact@v1
      with:
        name: wasm-modules
        path: modules/target/wasm32-wasi/release
    - name: Install lld
      run: |
        apt-get update
        apt-get install -y lld
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('Cargo.lock') }}-standalone
    - name: Install nightly Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target: wasm32-wasi
        override: true
    - name: Install wasm32-unknown-unknown
      run: rustup target add wasm32-unknown-unknown
    - name: Install rust-src
      run: rustup component add rust-src
    - name: Build core for no_std platform
      run: RUST_TARGET_PATH=`pwd` cargo +nightly build -Z build-std=core,alloc --target x86_64-multiboot2 --package nametbd-core --release
    - name: Build kernel for no_std platform
      run: RUST_TARGET_PATH=`pwd` cargo +nightly build -Z build-std=core,alloc --target x86_64-multiboot2 --package nametbd-standalone-kernel --release
    - name: Upload generated kernel
      uses: actions/upload-artifact@master
      with:
        name: kernel
        path: target/x86_64-multiboot2/release/nametbd-standalone-kernel

  build-iso:
    name: Build bootable x86 ISO
    needs: build-standalone
    runs-on: ubuntu-latest
    container:
      image: ubuntu:xenial
    steps:
    - uses: actions/checkout@v1
    - name: Download kernel
      uses: actions/download-artifact@v1
      with:
        name: kernel
        path: .
    - name: Install required packages
      run: |
        apt-get update
        apt-get install -y libisoburn1 xorriso grub-pc-bin
    - name: Prepare file structure
      run: |
        mkdir -p iso/boot/grub
        cp .github/workflows/grub.cfg iso/boot/grub
        mv nametbd-standalone-kernel iso/boot/kernel
    - name: Build ISO
      run: grub-mkrescue -o nametbd.iso iso
    - name: Upload generated kernel
      uses: actions/upload-artifact@master
      with:
        name: iso
        path: nametbd.iso

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
