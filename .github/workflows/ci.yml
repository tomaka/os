name: Continuous integration

on:
  pull_request:
  push:
    branches:    
      - develop

jobs:
  build-modules:
    name: Build WASM modules
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-10
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2020-05-31
        target: wasm32-wasi
        override: true
    - name: Install a recent version of clang
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" >> /etc/apt/sources.list
        apt-get update
        apt-get install -y clang-10
    - name: Install CMake
      run: apt-get install -y cmake
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          modules/target
        key: modules-cargo-${{ hashFiles('./modules/Cargo.lock') }}
    - name: Build modules
      run: cargo build --manifest-path ./modules/Cargo.toml --workspace --exclude stub --locked --verbose --release --target=wasm32-wasi
    - name: Upload WASM modules
      uses: actions/upload-artifact@v1
      with:
        name: wasm-modules
        path: modules/target

  build-hosted:
    name: Build hosted kernel
    needs: build-modules
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-10
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2020-05-31
        target: wasm32-wasi
        override: true
    - name: Install a recent version of clang
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" >> /etc/apt/sources.list
        apt-get update
        apt-get install -y clang-10
    - name: Download WASM modules
      uses: actions/download-artifact@v2
      with:
        name: wasm-modules
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          kernel/standalone-builder/target
          target
        key: hosted-kernel-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Build
      run: cargo build --workspace --exclude redshirt-standalone-kernel --exclude redshirt-core-proc-macros --locked --verbose
    - name: Run tests
      run: cargo test --workspace --exclude redshirt-standalone-kernel --exclude redshirt-core-proc-macros --locked --verbose
    - name: Check that benches compile
      run: cargo bench --workspace --no-run --exclude redshirt-standalone-kernel --exclude redshirt-core-proc-macros --locked --verbose

  build-standalone:
    name: Build standalone kernel
    needs: build-modules
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-10
    strategy:
      matrix:
        #target: [x86_64-multiboot2, arm-rpi2]  # TODO: not implemented
        target: [x86_64-multiboot2]
    steps:
    - uses: actions/checkout@v2
    - name: Download WASM modules
      uses: actions/download-artifact@v2
      with:
        name: wasm-modules
    - name: Install required packages
      run: |
        apt-get update
        apt-get install -y lld libisoburn1 xorriso grub-pc-bin
    - name: Install a recent version of clang
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" >> /etc/apt/sources.list
        apt-get update
        apt-get install -y clang-10
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          kernel/standalone-builder/target
          target
        key: standalone-kernel-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Install nightly Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly-2020-05-31
        target: wasm32-wasi
        override: true
    - name: Install rust-src
      run: rustup component add rust-src
    - name: Build kernel
      run: cargo run --manifest-path=./kernel/standalone-builder/Cargo.toml -- build-image --target ${{ matrix.target }} --device-type cdrom --out image
    - name: Upload generated kernel
      uses: actions/upload-artifact@v2
      with:
        name: kernel-${{ matrix.target }}
        path: image

  check-passive-node:
    name: Check p2p passive node
    runs-on: ubuntu-latest
    container:
      image: rust
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          modules/target
        key: passive-node-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Check peer-to-peer passive node
      run: cargo check --manifest-path ./modules/Cargo.toml --package p2p-loader --bin passive-node --locked --verbose --all-features

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Run cargo fmt on root workspace
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Run cargo fmt on modules workspace
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path=modules/Cargo.toml -- --check
      - name: Run cargo fmt on standalone tester workspace
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path=kernel/standalone-builder/Cargo.toml -- --check

  intra-doc-links:
    name: Check intra-doc links
    runs-on: ubuntu-latest
    container:
      image: rust
      env:
        CC: clang-10
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2020-05-31
          target: wasm32-wasi
          override: true
      - name: Install a recent version of clang
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
          echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main" >> /etc/apt/sources.list
          apt-get update
          apt-get install -y clang-10
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            modules/target
            kernel/standalone-builder/target
            target
          key: intra-doc-links-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check core intra-doc links
        run: RUSTDOCFLAGS="--deny intra_doc_link_resolution_failure" cargo doc --verbose --workspace --no-deps --document-private-items
      - name: Check modules intra-doc links
        run: RUSTDOCFLAGS="--deny intra_doc_link_resolution_failure" cargo doc --verbose --manifest-path modules/Cargo.toml --workspace --no-deps --document-private-items
