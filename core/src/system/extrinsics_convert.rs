// Copyright (C) 2019  Pierre Krieger
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use crate::native::{DummyMessageIdWrite, NativeProgramMessageIdWrite};
use crate::scheduler::CoreThread;
use crate::signature::Signature;

use alloc::{string::String, vec::Vec};
use core::future::Future;
use redshirt_syscalls_interface::{MessageId, Pid};

/// Reference to a native program.
///
/// This trait is not meant to be implemented on types `T`. Instead, if `T` represents the state
/// of the native program, then the [`ExtrinsicsConvertRef`] trait should be implemented on `&'a T`
/// instead (where `'a` is the lifetime parameter of the trait). This design is necessary due to
/// the lack of HRTBs in the Rust language.
pub trait ExtrinsicsConvert {
    type ExtrinsicId;

    /// When the [`ExtrinsicsConvert`] emits a message, this item is used by the caller to notify
    /// of the [`MessageId`] that has been emitted.
    type MessageIdWrite: NativeProgramMessageIdWrite;

    // TODO: better return type
    fn extrinsics(&self) -> Vec<(Self::ExtrinsicId, String, String, Signature)>;

    // TODO: don't pass a `thread`
    fn extrinsic_call(
        &self,
        thread: &mut CoreThread<Self::ExtrinsicId>,
        extrinsic: &Self::ExtrinsicId,
        params: &[wasmi::RuntimeValue],
    );

    /// Notify the [`ExtrinsicsConvert`] of a response to a message that it has previously emitted.
    fn message_response(&self, pid: Pid, message_id: MessageId, response: Vec<u8>);
}

/// Event generated by a [`ExtrinsicsConvert`].
pub enum ExtrinsicsConvertEvent<TMsgIdWrite> {
    /// Request to emit a message.
    ///
    /// If the interface is not available, the message will be buffered.
    Emit {
        /// Interface to emit the message on.
        interface: [u8; 32],
        /// If we expect an answer, contains an object that allows indicating to the
        /// [`ExtrinsicsConvertRef`] which `MessageId` has been attributed.
        ///
        /// `None` if the [`ExtrinsicsConvertRef`] doesn't expect an answer for this message.
        message_id_write: Option<TMsgIdWrite>,
        /// Message to send.
        // TODO: stronger typing than `Vec<u8>`
        message: Vec<u8>,
    },
    /// Request to cancel a previously-emitted message.
    CancelMessage { message_id: MessageId },
    /// Answer a message previously received with [`ExtrinsicsConvertRef::interface_message`].
    Answer {
        /// Message to answer.
        message_id: MessageId,
        /// Answer to the message. Can be an error if the message is invalid.
        // TODO: stronger typing than `Vec<u8>`
        answer: Result<Vec<u8>, ()>,
    },
}

/// Dummy pass-through implementation of the [`ExtrinsicsConvert`] trait.
#[derive(Debug, Default)]
pub struct DummyExtrinsicsConvert;

impl ExtrinsicsConvert for DummyExtrinsicsConvert {
    type ExtrinsicId = (); // TODO: `!` once stable
    type MessageIdWrite = DummyMessageIdWrite;

    fn extrinsics(&self) -> Vec<(Self::ExtrinsicId, String, String, Signature)> {
        Vec::new()
    }

    fn extrinsic_call(
        &self,
        _: &mut CoreThread<Self::ExtrinsicId>,
        _: &Self::ExtrinsicId,
        _: &[wasmi::RuntimeValue],
    ) {
        unreachable!()
    }

    fn message_response(&self, _: Pid, _: MessageId, _: Vec<u8>) {
        unreachable!()
    }
}
