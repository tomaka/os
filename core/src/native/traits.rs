// Copyright (C) 2019  Pierre Krieger
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use alloc::vec::Vec;
use core::future::Future;
use redshirt_syscalls_interface::{MessageId, Pid};

/// Reference to a native program.
pub trait NativeProgramRef<'a>: Clone {
    /// Future resolving to the next event the [`NativeProgram`] emits.
    type Future: Future<Output = NativeProgramEvent<Self::MessageIdWrite>> + Send + 'a;
    /// When the [`NativeProgram`] emits a message, this item is used by the caller to notify of
    /// the [`MessageId`] that has been emitted.
    type MessageIdWrite: NativeProgramMessageIdWrite;

    /// Returns a `Future` resolving to when the [`NativeProgram`] wants to do something.
    fn next_event(self) -> Self::Future;

    /// Notify the [`NativeProgram`] that a message has arrived on one of the interface that it
    /// has registered.
    fn interface_message(
        self,
        interface: [u8; 32],
        message_id: Option<MessageId>,
        emitter_pid: Pid,
        message: Vec<u8>,
    );

    /// Notify the [`NativeProgram`] that the program with the given [`Pid`] has terminated.
    fn process_destroyed(self, pid: Pid);

    /// Notify the [`NativeProgram`] of a response to a message that it has previously emitted.
    fn message_response(self, message_id: MessageId, response: Vec<u8>);
}

/// Event generated by a [`NativeProgram`].
pub enum NativeProgramEvent<TMsgIdWrite> {
    /// Request to emit a message.
    Emit {
        interface: [u8; 32],
        message_id_write: Option<TMsgIdWrite>,
        message: Vec<u8>,
    },
    /// Request to cancel a previously-emitted message.
    CancelMessage { message_id: MessageId },
    Answer {
        message_id: MessageId,
        answer: Result<Vec<u8>, ()>,
    },
}

pub trait NativeProgramMessageIdWrite {
    fn acknowledge(self, message_id: MessageId);
}

#[derive(Debug, Default)]
pub struct DummyMessageIdWrite;

impl NativeProgramMessageIdWrite for DummyMessageIdWrite {
    fn acknowledge(self, _: MessageId) {}
}
